---
title: "Base_brevet"
output: html_document
date: "2024-12-04"
---


Importation des library
```{r}
library(dplyr)
library(data.table)
library(stringi)
library(stringr)
library(dplyr) 
library(readr)
library(stringr)
library(tidyr)
library(stringi)
library(data.table)
library(knitr)  
library(kableExtra) 
library(wordcloud)
library(tidytext)
library(ggplot2)
library(wordcloud2)
library(RColorBrewer)
library(viridis)
library(tidytext)
library(stopwords)
```

Importation des données
Données brutes

Chargements des données sur :
- entreprises et brevets
- brevets : informations complementaires sur les brevets
- IPC code: IPC des brevets et leurs descriptions

```{r}
#Importation des données

ent_brevets <- read.csv("data/OECD/EPO_App_reg_small.txt", header = TRUE)

brevets <- read.csv("data/OECD/EPO_IPC_small.txt", header = TRUE)

IPC_A<- read.table("data/EN_ipc_title_list_20120101/EN_ipc_section_A_title_list_20120101.txt", header = TRUE, sep = "\t", fill = TRUE)
IPC_B<- read.table("data/EN_ipc_title_list_20120101/EN_ipc_section_B_title_list_20120101.txt", header = TRUE, sep = "\t", fill = TRUE)
IPC_C<- read.table("data/EN_ipc_title_list_20120101/EN_ipc_section_C_title_list_20120101.txt", header = TRUE, sep = "\t", fill = TRUE)
IPC_D<- read.table("data/EN_ipc_title_list_20120101/EN_ipc_section_D_title_list_20120101.txt", header = TRUE, sep = "\t", fill = TRUE)
IPC_E<- read.table("data/EN_ipc_title_list_20120101/EN_ipc_section_E_title_list_20120101.txt", header = TRUE, sep = "\t", fill = TRUE)
IPC_F<- read.table("data/EN_ipc_title_list_20120101/EN_ipc_section_F_title_list_20120101.txt", header = TRUE, sep = "\t", fill = TRUE)
IPC_G<- read.table("data/EN_ipc_title_list_20120101/EN_ipc_section_G_title_list_20120101.txt", header = TRUE, sep = "\t", fill = TRUE)
IPC_H<- read.table("data/EN_ipc_title_list_20120101/EN_ipc_section_H_title_list_20120101.txt", header = TRUE, sep = "\t", fill = TRUE)


```
Harmoniser les noms des entreprises
```{r}
# Suppression des éléments tels que "SA", "Inc", etc., pour uniformiser
 ent_brevets_clean <- ent_brevets %>%
  mutate(
   app_name = str_to_lower(app_name), # Mettre en minuscule
   app_name = stri_trans_general(app_name, "Latin-ASCII"), # Supprimer accents
   app_name = str_trim(app_name), # Supprimer espaces inutiles
   app_name = str_replace_all(app_name, "\\s*(s.a.s.|s.a.|sa|inc|ltd|sarl|sas|gmbh|plc|corp)\\s*$", ""), # Supprimer suffixes
   app_name = str_replace_all(app_name, "\\s*\\(.*?\\)", ""), # Supprimer tout ce qui est entre parenthèses
   app_name = str_squish(app_name), # Supprimer espaces multiples
   app_name = case_when(
      str_detect(app_name, "bouygues construction|bouygues construction materiel|bouygues telecom|bouygues immobilier|bouygues travaux publics|bouygues batiment|bouygues energies & services|bouygues energies et services|bouygues offshores|bouygues s.a.") ~ "bouygues",
      str_detect(app_name, "bnp paribas asset management") ~ "bnp paribas",
      str_detect(app_name, "l'oreal, s.a.|l'oreal,") ~ "l'oreal",
      str_detect(app_name, "airbus operations|airbus defence and space|airbus france|airbus espana, s.I.|airbus (s.a.s.)|airbus operations (sas)|airbus france(societe par actions simplifiees)|airbus societe par actions simplifiees|airbus cybersecurity|airbus helicopters|airbus operations|aerospatiale matra airbus|airbus france|airbus(sas)|airbus ds|airbus ds slc|airbus group|airbus interiors services|airbus oneweb satellites|airbus safran launchers|airbus ds electronics and border security") ~ "airbus",
      str_detect(app_name, "atos integration|atos worldgrid sl|atos worldgrid|atos global delevery center polska sp.z o.o.sp.k.|atos se|atos services|atos environnement") ~ "atos",
      str_detect(app_name, "peugeot citroen automobiles|peugeot citroen automobiles|peugeot citroen automobiles société anonyme|automobiles peugeot|acier et outillage peugeot societe dites:|peugeot motocycles|peugeot saveurs|peugeot saveurs snc") ~ "peugeot",
      str_detect(app_name, "alcatel lucent|alcatel lucent, s.a.|alcatal mobile communication france|alcatal alsthom compagnie general d'electricite|alcatel submarine networks|alcatel- lucent shanghai bell co.,|alcatel-lucent") ~ "alcatel",
        str_detect(app_name, "orange vallee") ~ "orange ",
      str_detect(app_name, "thales (dis|alenia|seso|invest)") ~ "thales",
      str_detect(app_name, "air liquide|l'air liquide") ~ "air liquide",
      str_detect(app_name, "dassault aviation|dassault systemes") ~ "dassault aviation",
      str_detect(app_name, "areva (mines|creusot forge|nc|renewables|np)") ~ "areva",
      str_detect(app_name, "alstom (transport|renewable|hydro france|aptis)") ~ "alstom",
      str_detect(app_name, "cpe lyon formation continue") ~ "cpe lyon",
      str_detect(app_name, "centre national de la recherche scientifique|cnrs") ~ "cnrs",
      str_detect(app_name, "renault (s.a.s.|trucks|tech|defense)|renault s.a.s") ~ "renault",
      str_detect(app_name, "thomson licensing dtv") ~ "thomson licensing",
      str_detect(app_name, "alcatel lucent|alcatel submarine networks|alcatel-lucent") ~ "alcatel",
      str_detect(app_name, "total energies nouvelles activites u|total marketing services|total petrochemicals france|total raffinage & marketing|total raffinage chimie|	
total raffinage france|total raffinage marketing|total se|total solar international|total raffinage france") ~ "total",
      str_detect(app_name, "sanofi biotechnology|	sanofi mature ip|sanofi pasteur|sanofi-aventis") ~ "sanofi",
      str_detect(app_name, "compagnie generale des etablissement michelin-michelin & cie|compagnie generale des etablissements michelin|michelin travel partner") ~ "michelin",
      str_detect(app_name, "compagnie gervais danone") ~ "danone",
      str_detect(app_name, "engie home services") ~ "engie",
      str_detect(app_name, "legrand france|legrand snc") ~ "legrand",
      str_detect(app_name, "safran aerosystems|safran aerotechnics|safran aircraft engines|safran ceramics|safran data systems|safran electrical & power|safran electronics & defense|safran electronics & defense cockpit solutions|safran filtration systems|	safran helicopter engines|safran identity & security|safran landing system|safran landing systems|safran nacelles|safran nacelles|safran seats|	safran transmission systems|safran ventilation systems|safran helicopter engines|safran power units|safran transmission systems|airbus safran launchers") ~ "safran",
      str_detect(app_name, "veolia eau - compagnie generale des eaux|veolia environnement-ve|veolia proprete|veolia water solutions & technologies support| veolia water solutions & technologies support,") ~ "veolia",
       str_detect(app_name, "vinci construction|vinci environnement") ~ "vinci",
    TRUE ~ app_name # Garder inchangé si aucune règle ne s'applique
   ) 
  ) %>%
  
 filter(!is.na(app_name) & app_name != "") # Supprimer les lignes vides ou NA

```

```{r}
# Filtrage des sections IPC pour ne garder que celles avec un code de 4 caractères
IPC_A = subset(IPC_A, nchar(A) == 4)
IPC_B = subset(IPC_B, nchar(B) == 4)
IPC_C = subset(IPC_C, nchar(C) == 4)
IPC_D = subset(IPC_D, nchar(D) == 4)
IPC_E = subset(IPC_E, nchar(E) == 4)
IPC_F = subset(IPC_F, nchar(F) == 4)
IPC_G = subset(IPC_G, nchar(G) == 4)
IPC_H = subset(IPC_H, nchar(H) == 4)
```


```{r}
## # Harmonisation des noms de colonnes pour chaque section

colnames(IPC_A) <- c("IPC", "IPC_description")
colnames(IPC_B) <- c("IPC", "IPC_description")
colnames(IPC_C) <- c("IPC", "IPC_description")
colnames(IPC_D) <- c("IPC", "IPC_description")
colnames(IPC_E) <- c("IPC", "IPC_description")
colnames(IPC_F) <- c("IPC", "IPC_description")
colnames(IPC_G) <- c("IPC", "IPC_description")
colnames(IPC_H) <- c("IPC", "IPC_description")

# Fusion de toutes les sections en une seule table
ipc_descriptions <- rbind(IPC_A, IPC_B, IPC_C, IPC_D, IPC_E, IPC_F, IPC_G, IPC_H)
```

Filtrer les données en France entre 2010 et 2020

```{r}
ent_fr <- subset(ent_brevets_clean, ent_brevets_clean$ctry=="FR")

ent_brevets_10_20 <- brevets %>%
  filter(prio_year >= 2010 & prio_year <= 2020) %>%
  mutate(IPC = substr(IPC, 1, 4))

```


```{r}
# Création d'une table des IPC uniques
ipc_brevets_unique <- ent_brevets_10_20 %>% distinct()
```

Jointure entre les brevets et les IPC pour créer une base de données complète
```{r}
base_complète <- inner_join(ent_fr, ent_brevets_10_20, by = "appln_id",relationship = "many-to-many")
base_complète <- inner_join(base_complète, ipc_descriptions, by = "IPC")
```

```{r}
base_complète <- base_complète %>% distinct()
```
 Regroupement des données par nom d'application et calcul de diverses statistiques
```{r}

base_brevets <- base_complète %>%
  group_by(app_name) %>%
  reframe(
    n_patents = n(),  # Nombre total de brevets par application
    ipc_main_code = {
      ipc_counts <- table(IPC)  # Compte des occurrences des codes IPC
      max_count <- max(ipc_counts)  # Compte maximum
      main_codes <- names(ipc_counts[ipc_counts == max_count])  # Codes principaux
      paste(main_codes, collapse = ", ")  # Combinaison des codes principaux
    },
    ipc_main_desc = {
      # Vérification si `ipc_main_code` contient des données valides
      if (!is.null(ipc_main_code) && ipc_main_code != "") {
        main_codes <- strsplit(ipc_main_code, ", ")[[1]]  # Séparation des codes
        descs <- sapply(main_codes, function(code) {
          desc_row <- ipc_descriptions[ipc_descriptions$IPC == code, "IPC_description"]
          if (length(desc_row) > 0) desc_row else NA  # Vérifie l'existence de la description
        })
        paste(descs, collapse = ", ")  # Combinaison des descriptions
      } else {
        NA  # Aucun code principal trouvé
      }
    },
    ipc_second_code = {
      ipc_counts <- table(IPC)  # Compte des occurrences des codes IPC
      sorted_ipc <- sort(ipc_counts, decreasing = TRUE)  # Tri des codes par fréquence
      if (length(sorted_ipc) > 1) {  # Vérification de l'existence d'un second code
        second_count <- sorted_ipc[2]  # Compte du deuxième code
        second_codes <- names(sorted_ipc)[sorted_ipc == second_count]  # Codes du deuxième rang
        if (length(second_codes) > 1) {
          NA  # Si plusieurs, renvoie NA
        } else {
          second_codes[1]  # Renvoie le deuxième code
        }
      } else {
        NA  # Si pas de deuxième code, renvoie NA
      }
    },
    ipc_second_desc = {
      if (!is.na(ipc_second_code) && ipc_second_code != "") {  # Vérifie si un deuxième code existe
        desc_row <- ipc_descriptions[ipc_descriptions$IPC == ipc_second_code, "IPC_description"]
        if (length(desc_row) > 0) desc_row else NA  # Récupération de la description
      } else {
        NA  # Sinon, renvoie NA
      }
    },
    addr_city_main = {
      city_counts <- table(city)  # Compte des occurrences des villes
      if (length(city_counts) > 0) {  # Vérification de l'existence de villes
        main_city <- names(city_counts)[which.max(city_counts)]  # Ville la plus fréquente
        main_city  # Renvoie la ville principale
      } else {
        NA  # Si aucune ville, renvoie NA
      }
    },
    addr_dept_main = {
      dept_counts <- table(postal_code)  # Compte des occurrences des départements
      if (length(dept_counts) > 0) {  # Vérification de l'existence de départements
        main_dept <- names(dept_counts)[which.max(dept_counts)]  # Département le plus fréquent
        substr(main_dept, 1, 2)  # Renvoie les deux premiers caractères du code postal
      } else {
        NA  # Si aucun département, renvoie NA
      }
    }
  )
```
 Réorganisation et synchronisation des colonnes IPC et leurs descriptions

```{r}
base_brevets <- base_brevets %>%
  mutate(
    # Séparer les codes IPC et descriptions en listes
    ipc_main_code_list = str_split(ipc_main_code, ",\\s*"), # Liste des codes
    ipc_main_desc_list = str_split(ipc_main_desc, ",\\s*"), # Liste des descriptions

    # Garder le premier code et sa description dans ipc_main_code et ipc_main_desc
    ipc_main_code = sapply(ipc_main_code_list, function(x) x[1]),
    ipc_main_desc = sapply(ipc_main_desc_list, function(x) x[1]),

    # Remplir ipc_second_code et ipc_second_desc si NA, à partir des deuxièmes éléments
    ipc_second_code = ifelse(
      is.na(ipc_second_code) | ipc_second_code == "",
      sapply(ipc_main_code_list, function(x) if (length(x) > 1) x[2] else NA),
      ipc_second_code
    ),
    ipc_second_desc = ifelse(
      is.na(ipc_second_code) | ipc_second_code == "",
      NA, # Si ipc_second_code est NA, mettre ipc_second_desc à NA
      ifelse(
        is.na(ipc_second_desc) | ipc_second_desc == "",
        sapply(ipc_main_desc_list, function(x) if (length(x) > 1) x[2] else NA),
        ipc_second_desc
      )
    )
  ) %>%
  select(-ipc_main_code_list, -ipc_main_desc_list) # Supprimer les colonnes temporaires

```
 Renommer la colonne dans base_brevets
```{r}
base_brevets <- base_brevets %>%
  rename(firm_name = app_name)
```

Exportation de la base_brevets au format CSV
```{r}
write.csv(base_brevets, "base_brevets.csv", row.names = FALSE)
```



